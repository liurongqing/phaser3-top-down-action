!function(e){var t={};function s(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)s.d(i,a,function(t){return e[t]}.bind(null,a));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);var i={};s.r(i),s.d(i,"Boot",function(){return l}),s.d(i,"Main",function(){return y}),s.d(i,"UI",function(){return u});const a="./",h="./";class l extends Phaser.Scene{constructor(){super("bootScene")}preload(){this.load.setBaseURL(a),this.load.setPath(h),this.load.tilemapTiledJSON("level1","tilemaps/level1.json"),this.load.tilemapTiledJSON("level2","tilemaps/level2.json"),this.load.spritesheet("RPGpack_sheet","images/RPGpack_sheet.png",{frameWidth:64,frameHeight:64}),this.load.spritesheet("characters","images/roguelikeChar_transparent.png",{frameWidth:17,frameHeight:17}),this.load.image("portal","images/raft.png"),this.load.image("coin","images/coin_01.png"),this.load.image("bullet","images/ballBlack_04.png")}create(){this.scene.start("mainScene",{level:1,newGame:!0,levels:{1:"level1",2:"level2"}})}}class r extends Phaser.Physics.Arcade.Sprite{constructor(e,t,s){super(e,t,s,"characters",325),this.scene.physics.world.enable(this),this.scene.add.existing(this),this.setScale(4),this.health=3,this.hitDelay=!1,this.direction="up"}update(e){this.setVelocity(0),e.up.isDown?(this.direction="up",this.setVelocityY(-150)):e.down.isDown&&(this.direction="down",this.setVelocityY(150)),e.left.isDown?(this.direction="left",this.setVelocityX(-150)):e.right.isDown&&(this.direction="right",this.setVelocityX(150))}enemyCollision(e,t){this.hitDelay||(this.loseHealth(),this.hitDelay=!0,this.tint=16711680,this.scene.time.addEvent({delay:1200,callback:()=>{this.hitDelay=!1,this.tint=16777215},callbackScope:this}))}loseHealth(){console.log(this.health),this.health--,this.scene.events.emit("loseHealth",this.health),this.health<=0&&this.scene.loadNextLevel(!0)}}class n extends Phaser.Physics.Arcade.Sprite{constructor(e,t,s){super(e,t,s,"portal"),this.scene=e,this.scene.physics.world.enable(this),this.scene.add.existing(this)}update(){}}class o extends Phaser.Physics.Arcade.StaticGroup{constructor(e,t,s,i){super(e,t),this.scene=t,i.forEach(e=>{e.setOrigin(0),this.world.enableBody(e,1),e.setScale(.2),e.body.setSize(e.width*e.scaleX,e.height*e.scaleY,!0),this.add(e)}),this.refresh()}collectCoin(e,t){this.remove(t),t.destroy(),this.scene.events.emit("coinCollected")}}class c extends Phaser.Physics.Arcade.Sprite{constructor(e,t,s,i){super(e,t,s,"characters",i),this.scene=e,this.health=3,this.scene.physics.world.enable(this),this.scene.add.existing(this),this.setScale(4),this.timeEvent=this.scene.time.addEvent({delay:3e3,callback:this.move,loop:!0,callbackScope:this})}move(){switch(Math.floor(4*Math.random()+1)){case 1:this.setVelocityX(100);break;case 2:this.setVelocityX(-100);break;case 3:this.setVelocityY(100);break;case 4:this.setVelocityY(-100);break;default:this.setVelocityX(100)}this.scene.time.addEvent({delay:500,callback:()=>{this.active&&this.setVelocity(0)},callbackScope:this})}loseHealth(){this.health--,this.tint=16711680,0===this.health?(this.timeEvent.destroy(),this.destroy()):this.scene.time.addEvent({delay:200,callback:()=>{this.tint=16777215}})}}class d extends Phaser.Physics.Arcade.Group{constructor(e,t,s,i){super(e,t,s),this.scene=t,this.spriteFrames=[0,1,54,55,108,109,162,163],this.createEnemies(t,i)}createEnemies(e,t){t.forEach(t=>{const s=Math.floor(Math.random()*this.spriteFrames.length-1),i=new c(e,t.x,t.y,this.spriteFrames[s]);this.add(i),t.destroy()})}}class p extends Phaser.Physics.Arcade.Group{constructor(e,t,s){super(e,t),this.scene=t,this.createMultiple({frameQuantity:5,key:"bullet",active:!1,visible:!1})}fireBullet(e,t,s){const i=this.getFirstDead(!1);if(i){switch(i.enableBody(!0),i.active=!0,i.visible=!0,i.setPosition(e,t),i.setScale(.1),s){case"up":i.setVelocityY(-300);break;case"down":i.setVelocityY(300);break;case"left":i.setVelocityX(-300);break;case"right":i.setVelocityX(300);break;default:i.setVelocityY(-300)}this.scene.time.addEvent({delay:1500,callback:()=>{i.disableBody(),i.active=!1,i.visible=!1,i.setVelocity(0)}})}}enemyCollision(e,t){e.active=!1,e.visible=!1,e.disableBody(),t.loseHealth()}}class y extends Phaser.Scene{constructor(){super("mainScene")}init(e){this._LEVEL=e.level,this._LEVELS=e.levels,this._NEWGAME=e.newGame,this.loadingLevel=!1,this._NEWGAME&&this.events.emit("newGame")}create(){this.scale.on("resize",this.resize,this),this.cursors=this.input.keyboard.createCursorKeys(),this.spaceKey=this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE),this.createMap(),this.createPlayer(),this.createPortal(),this.coins=this.map.createFromObjects("Coins","Coin",{key:"coin"}),this.coinsGroup=new o(this.physics.world,this,[],this.coins),this.enemies=this.map.createFromObjects("Enemies","Enemy",{}),this.enemiesGroup=new d(this.physics.world,this,[],this.enemies),this.bullets=new p(this.physics.world,this,[]),this.addCollisions(),this.cameras.main.startFollow(this.player)}update(){this.player.update(this.cursors),Phaser.Input.Keyboard.JustDown(this.spaceKey)&&this.bullets.fireBullet(this.player.x,this.player.y,this.player.direction)}addCollisions(){this.physics.add.collider([this.player,this.enemiesGroup],this.blockedLayer),this.physics.add.overlap(this.player,this.enemiesGroup,this.player.enemyCollision.bind(this.player)),this.physics.add.overlap(this.player,this.portal,this.loadNextLevel.bind(this,!1)),this.physics.add.overlap(this.coinsGroup,this.player,this.coinsGroup.collectCoin.bind(this.coinsGroup)),this.physics.add.overlap(this.bullets,this.enemiesGroup,this.bullets.enemyCollision)}loadNextLevel(e){this.loadingLevel||(this.cameras.main.fade(500,0,0),this.cameras.main.on("camerafadeoutcomplete",()=>{e?this.scene.restart({level:1,levels:this._LEVELS,newGame:!0}):1===this._LEVEL?this.scene.restart({level:2,levels:this._LEVELS,newGame:!1}):2===this._LEVEL&&this.scene.restart({level:1,levels:this._LEVELS,newGame:!1})}),this.loadingLevel=!0)}createMap(){this.add.tileSprite(0,0,8e3,8e3,"RPGpack_sheet",31),this.map=this.make.tilemap({key:"level1"}),this.tiles=this.map.addTilesetImage("RPGpack_sheet"),this.backgroundLayer=this.map.createStaticLayer("Background",this.tiles,0,0),this.blockedLayer=this.map.createStaticLayer("Blocked",this.tiles,0,0),this.blockedLayer.setCollisionByExclusion([-1])}createPlayer(){this.map.findObject("Player",e=>{this._NEWGAME&&1===this._LEVEL?(console.log("new",e.type),"StartingPositionPortal"===e.type&&(this.player=new r(this,e.x,e.y))):(console.log("old",e.type),this.player=new r(this,e.x,e.y))})}createPortal(){this.map.findObject("Portal",e=>{1===this._LEVEL?this.portal=new n(this,e.x,e.y-68):2===this._LEVEL&&(this.portal=new n(this,e.x,e.y))})}resize(e,t,s,i){let a=e.width,h=e.height;void 0===a&&(a=this.sys.game.config.width),void 0===h&&(h=this.sys.game.config.height),this.cameras.resize(a,h)}}class u extends Phaser.Scene{constructor(){super({key:"UI",active:!0})}init(){this.coinsCollected=0}create(){this.scoreText=this.add.text(12,12,`Score: ${this.coinsCollected}`,{fontSize:"32px",fill:"#fff"}),this.healthText=this.add.text(12,50,"Health: 3",{fontSize:"32px",fill:"#fff"}),this.mainScene=this.scene.get("mainScene"),this.mainScene.events.on("coinCollected",()=>{this.coinsCollected++,this.scoreText.setText(`Score: ${this.coinsCollected}`)}),this.mainScene.events.on("loseHealth",e=>{this.healthText.setText(`Health: ${e}`)}),this.mainScene.events.on("newGame",e=>{this.coinsCollected=0,this.scoreText.setText(`Score: ${this.coinsCollected}`),this.healthText.setText("Health: 3")})}}const m=[];for(let e in i)m.push(i[e]);const b={type:Phaser.AUTO,backgroundColor:0,parent:"app",autoCenter:Phaser.Scale.CENTER_BOTH,width:window.innerWidth,height:window.innerHeight,scene:m,pixelArt:!0,roundPixel:!0,physics:{default:"arcade",arcade:{gravity:{y:0},debug:!1}}};window.game=new Phaser.Game(b),window.addEventListener("resize",e=>{window.game.scale.resize(window.innerWidth,window.innerHeight)})}]);